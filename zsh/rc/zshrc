#               ,______________________,
#               |****;/''   /*********/
#               |**7'      /*********/
#               |;(       /*********/
#                       /'********/'
#                      /*********/
#                    /'********/'
#                   /*********/       _.
#                 /'********/'       )*|
#                /*********/       ,7**|
#               /*********/______/*****|
#               """"""""""""""""""""""""
#               __              _
#               \ \      ___ __| |_
#                > >    |_ /(_-< ' \
#               /_/     /__|___/_||_|     ___
#                                        |___|

#       * author    : 0ctpus
#       * ver       : 3.40





# * »   [1] general
# -------------------------------------------                            /
# ----------------------------------------------------------------------/
# [

export EDITOR=vim
export LANG=en_US
export ENCODE=UTF-8
export LC_CTYPE=$LANG.$ENCODE
export LC_ALL=$LANG.$ENCODE
export KCODE=u

bindkey -v
bindkey -M viins 'jj' vi-cmd-mode

setopt auto_pushd
setopt auto_cd
setopt no_beep
setopt no_list_beep
alias history='history -E'

# ref. https://rcmdnk.com/blog/2017/10/13/computer-bash-zsh
function source_file {
  if [ $# -lt 1 ];then
    echo "ERROR!!! source_file is called w/o an argument"
    return
  fi
  arg="$1"
  shift
  if [ -r "$arg" ]; then
    . "$arg"
  fi
}
# end



# * »»  complement -------------------------------------/
# [[

zmodload zsh/mapfile
autoload -Uz compinit; compinit
setopt auto_list 
setopt auto_menu 
setopt list_packed 
setopt list_types
bindkey "^[[Z" reverse-menu-complete
zstyle ':completion:*' matcher-list 'm:{a-z}={A-Z}'
setopt correct
setopt extended_glob
unsetopt caseglob
autoload predict-on
fpath=($ZDOTDIR/rc/completion $fpath)

# ]]
# * «« -------------------------------------------------/



# * »»  history ----------------------------------------/
# [[

HISTFILE=$HOME/.zsh_history
HISTSIZE=1000000
SAVEHIST=1000000
setopt bang_hist
setopt extended_history
setopt hist_ignore_dups
setopt share_history
setopt hist_reduce_blanks
autoload history-search-end
zle -N history-beginning-search-backward-end history-search-end
zle -N history-beginning-search-forward-end history-search-end
bindkey "^P" history-beginning-search-backward-end
bindkey "^N" history-beginning-search-forward-end
function history-all { history -E 1 }

# ]]
# * «« -------------------------------------------------/



# * »»  path -------------------------------------------/
# [[

if (( $+commands[go] )); then
  if [ -e $HOME/.go ]; then
    export GOPATH=$HOME/.go
    export PATH=$GOPATH/bin:$PATH
    export GO15VENDOREXPERIMENT=1
  fi
fi

if [ -e $HOME/.cargo/bin ]; then
  export PATH="$HOME/.cargo/bin:$PATH"
fi

# ]]
# * «« -------------------------------------------------/



# * »»  plugin -----------------------------------------/
# [[

if (( $+commands[git] )); then
  #
fi

#https://github.com/junegunn/fzf
source_file $HOME/.fzf.zsh
if (( $+commands[fzf] )); then
  fe() {
    local file
    file=$(fzf --query="$1" --select-1 --exit-0)
    [ -n "$file" ] && ${EDITOR:-vim} "$file"
  }

  fd() {
    local dir
    dir=$(find ${1:-*} -path '*/\.*' -prune -o -type d -print 2> /dev/null | fzf +m) &&
    cd "$dir"
  }

  fh() {
    eval $(([ -n "$ZSH_NAME" ] && fc -l 1 || history) | fzf +s | sed 's/ *[0-9]* *//')
  }

  fkill() {
    ps -ef | sed 1d | fzf -m | awk '{print $2}' | xargs kill -${1:-9}
  }
fi

source_file ${HOME}/.enhancd/init.sh

# ]]
# * «« -------------------------------------------------/



# * »»  alias -------------------------------------------/
# [[

alias v='vim'

function runcpp () { g++ $1 && shift && ./a.out $@ }
alias -s {c,cpp}=runcpp

function extract() {
  case $1 in
    *.tar.gz|*.tgz) tar xzvf $1;;
    *.tar.xz) tar Jxvf $1;;
    *.zip) unzip $1;;
    *.lzh) lha e $1;;
    *.tar.bz2|*.tbz) tar xjvf $1;;
    *.tar.Z) tar zxvf $1;;
    *.gz) gzip -d $1;;
    *.bz2) bzip2 -dc $1;;
    *.Z) uncompress $1;;
    *.tar) tar xvf $1;;
    *.arj) unarj $1;;
    *.rar) unrar $1;;
  esac
}
alias -s {gz,tgz,zip,lzh,bz2,tbz,Z,tar,arj,xz,rar}=extract

autoload -Uz zmv
alias zmv='noglob zmv -W'
alias fuck='eval $(thefuck $(fc -ln -1))'
alias diff='diff -u'

if (( $+commands[tmux] )); then
  alias tl='tmux ls'
  alias tk='tmux kill-session -t $1'
  alias ta='tmux a'
  alias tat='tmux a -t $1'
fi

# * »»» color --------------------------/

# * »»»» cat
if (( $+commands[pygmentize] )); then
  alias cat='pygmentize -O style=monokai -f console256 -g'
fi

# * »»»» diff
if (( $+commands[colordiff] )); then
  alias diff='colordiff -u'
fi

# * »»»» less
export MANPAGER='less -R'
function man() {
  env \
    LESS_TERMCAP_mb=$(printf "\e[1;31m") \
    LESS_TERMCAP_md=$(printf "\e[1;31m") \
    LESS_TERMCAP_me=$(printf "\e[0m") \
    LESS_TERMCAP_se=$(printf "\e[0m") \
    LESS_TERMCAP_so=$(printf "\e[1;44;33m") \
    LESS_TERMCAP_ue=$(printf "\e[0m") \
    LESS_TERMCAP_us=$(printf "\e[1;32m") \
    man "$@"
}
if (( $+commands[unbuffered] )); then
  function less_with_unbuffer() {
    unbuffered "$@" |& less -SR
  }
    alias ul=less_with_unbuffer
fi

# * »»»» grep
alias grep='grep --color'

# * »»»» grc
if (( $+commands[grc] )); then
  alias mount='grc mount'
  alias ifconfig='grc ifconfig'
  alias dig='grc dig'
  alias ldap='grc ldap'
  alias netstat='grc netstat'
  alias ping='grc ping'
  alias ps='grc ps'
  alias traceroute='grc traceroute'
  alias gcc='grc gcc'
  alias g++='grc g++'
fi

# * ««« --------------------------------/


# ]]
# * «« -------------------------------------------------/

# ]





# * »   [2] look
# -------------------------------------------                           /
# ---------------------------------------------------------------------/
# [

autoload -Uz vcs_info
setopt transient_rprompt
setopt prompt_subst



# * »»  theme ------------------------------------------/
# [[

autoload -U colors; colors
export TERM=xterm-256color

# ]]
# * «« -------------------------------------------------/



# * »»  ls color ---------------------------------------/
# [[

export LSCOLORS=gxfxcxdxbxegedabagacad
export LS_COLORS='no=00;38;5;244:rs=0:di=00;38;5;33:ln=00;38;5;37:mh=00:pi=48;5;230;38;5;136;01:so=48;5;230;38;5;136;01:do=48;5;230;38;5;136;01:bd=48;5;230;38;5;244;01:cd=48;5;230;38;5;244;01:or=48;5;235;38;5;160:su=48;5;160;38;5;230:sg=48;5;136;38;5;230:ca=30;41:tw=48;5;64;38;5;230:ow=48;5;235;38;5;33:st=48;5;33;38;5;230:ex=00;38;5;64:'
if ! [[ $OSTYPE = msys* ]]; then
  if [ -e $ZDOTDIR/rc/dircolors ]; then
    if (( $+commands[dircolors] )); then
      eval $(dircolors $ZDOTDIR/rc/dircolors)
    elif (( $+commands[gdircolors] )); then
      eval $(gdircolors $ZDOTDIR/rc/dircolors)
    fi
  fi
fi
export ZLS_COLORS=$LS_COLORS
export CLICOLOR=true
zstyle ':completion:*:default' list-colors ${(s.:.)LS_COLORS}

alias ls='ls -F --color=auto --group-directories-first'

function cd() {
  builtin cd $@ && ls;
}

# ]]
# * «« -------------------------------------------------/



# * »»  prompt -----------------------------------------/
# [[

PROMPT="[%~]%(!,#,$) "
RPROMPT="[%n|%m|%w|%*]"
SPROMPT="%r is correct [n,y,a,e]: "

if [[ $TERM = xterm* ]];then
  local DARKGRAY=237
  local WHITE=15
  local GREEN=47
  local BLUE=31
  local RED=161

  local BACKGROUND=${DARKGRAY}
  local FOREGROUND=${WHITE}
  local COLOR="%F{${FOREGROUND}}%K{${BACKGROUND}}"
  local PROMPTBODY="${COLOR} %~ ${COLOR}%F{${WHITE}}%(?.%K{${BLUE}}.%K{${RED}}) * %f%k "

  case ${UID} in
    0) #root
      local UCOLOR=${RED};;
    *)
      local UCOLOR=${BLUE};;
  esac

  PROMPT=${PROMPTBODY}
  RPROMPT="%F{${FOREGROUND}}%K{${UCOLOR}} %n %F{${GREEN}}%K{${BACKGROUND}} %m ${COLOR}|${COLOR} %w ${COLOR}|${COLOR} %* %f%k"

  if (( $+commands[python] || $+commands[python3] )); then
    if [ -e $ZDOTDIR/rc/plugin/prompt.py ]; then
      function u_prompt() {
        local RETURN=$?
        if [ -e $ZDOTDIR/rc/plugin/prompt.py ]; then
          PROMPT="$(~/.zsh/rc/plugin/prompt.py ${RETURN})"
        else
          PROMPT=${PROMPTBODY}
        fi
      }
      precmd() { u_prompt }
    fi
  fi
fi



# * »»» prompt reset (time sync) -------/

zmodload zsh/datetime
reset_tmout() { TMOUT=$[1-EPOCHSECONDS%1] }
precmd_functions=(${precmd_functions} reset_tmout)
redraw_tmout() { zle reset-prompt; reset_tmout }
TRAPALRM() { redraw_tmout }

# * ««« --------------------------------/

# ]]
# * «« -------------------------------------------------/

# ]





# * »   [3] os
# -------------------------------------------                           /
# ---------------------------------------------------------------------/
# [

case ${OSTYPE} in #uname http://en.wikipedia.org/wiki/Uname
  # linux
  linux*)
    if [ -d ${HOME}/bin ]; then
      export PATH=${HOME}/bin:${PATH}
    fi
    if [ -d ${HOME}/usr/bin ]; then
      export PATH=${HOME}/usr/bin:${PATH}
    fi
    if [ -e ${HOME}/.tmux.conf ] && (( $+commands[tmux] )); then
      if [[ ! -n $TMUX && $- != *l* ]]; then
        # get the IDs
        ID="`tmux list-sessions`"
        if [[ -z "$ID" ]]; then
          tmux new-session
        fi
        if (( $+commands[fzf] )); then
          create_new_session="Create New Session"
          ID="$ID\n${create_new_session}:"
          ID="`echo $ID | fzf | cut -d: -f1`"
          if [[ "$ID" = "${create_new_session}" ]]; then
            tmux new-session
          elif [[ -n "$ID" ]]; then
            tmux attach-session -t "$ID"
          else
            :  # Start terminal normally
          fi
        fi
      fi
    fi ;;
  # mac os
  darwin*)
    alias ls='ls -G -F -L'
    function cd() {
      builtin cd $@ && ls;
    } ;;
  #windows
  CYGWIN*) ;;
  msys*)
    alias shutdown='shutdown -s -f'
    if (( $+commands[winpty] )); then
      alias cl='winpty cl'
      alias diskpart='winpty diskpart'
      alias sdelete='winpty sdelete'
      alias mysql='winpty mysql'
    fi ;;
esac

# ]





# * »   [4] local setting
# -------------------------------------------                           /
# ---------------------------------------------------------------------/
# [

export H_FLUG=0

source_file $ZDOTDIR/rc/function.zsh

if [ ! $(ls ${HOME}/.cache/zsh | wc -l) -eq 0 ];then
  source_file ${HOME}/.cache/zsh/*
fi

if [ ${H_FLUG} = 1 ]; then
  source_file ${HOME}/.syntax/zsh-syntax-highlighting.zsh
fi

# ]

