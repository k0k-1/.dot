# * >>>  useful ------------------------/
# [[[

[[plugins]]
repo= 'Shougo/dein.vim'

[[plugins]]
repo = 'Shougo/vimproc.vim'
#hook_post_update = '''
#    if dein
#        let cmd = 'tools\\update-dll-mingw'
#    elseif dein
#        let cmd = 'make -f make_cygwin.mak'
#    elseif executable('gmake')
#        let cmd = 'gmake'
#    else
#        let cmd = 'make'
#    endif
#    let g:dein
#'''

[[plugins]]
repo = 'thinca/vim-quickrun'
hook_add = '''
    let g:quickrun_config = {
        \ '_'                                    : {
        \    'outputter/buffer/split'            : ':botright 8sp',
        \    'outputter/buffer/close_on_empty'   : 1,
        \    'runner'                            : 'vimproc',
        \    'runner/vimproc/updatetime'         : 45 },
        \ }

    let s:config = {
        \ 'java'         : {
        \    'exec'      : [
        \                    'javac -J-Dfile.encoding=UTF8 %o %s',
        \                    '%c -Dfile.encoding=UTF8 %s:t:r %a'
        \                  ],
        \                  },
        \ }

    call extend(g:quickrun_config, s:config)
    unlet s:config
'''

[[plugins]]
repo = 'Shougo/neocomplete.vim'
on_i = 1
if   = '''has('lua')'''
depends = 'Shougo/vimproc.vim'
hook_add = '''
    let g:neocomplete#enable_at_startup = 1
    let g:neocomplete#enable_smart_case = 1
    let g:neocomplete_enable_underbar_completion = 1
    let g:neocomplete_min_syntax_length = 3
    let g:neocomplete#max_list = 1000
    let g:neocomplete_auto_completion_start_length = 3
    let g:neocomplete_force_overwrite_completefunc = 1
    let g:neocomplete#skip_auto_completion_time = '0.2'
    let g:neocomplete#force_omni_input_patterns = get(g:, 'neocomplete#force_omni_input_patterns', {})
    let g:neocomplete#sources#omni#input_patterns = get(g:, 'neocomplete#sources#omni#input_patterns', {})
    "let g:neocomplete#sources#omni#input_patterns.go = '\h\w\.\w*'
    let g:neocomplete#sources#omni#functions = get(g:, 'neocomplete#sources#omni#functions', {})
    let g:neocomplete#enable_auto_delimiter = 1
'''

repo = 'osyo-manga/shabadou.vim'
depends = 'thinca/vim-quickrun'

# ]]]
# * <<< --------------------------------/



# * >>>  syntax check ------------------/
# [[[

repo = 'osyo-manga/vim-watchdogs'
depends = ['Shougo/vimproc',
           'thinca/vim-quickrun',
           'osyo-manga/shabadou.vim']
hook_add = '''
    let s:config = {
    \   "watchdogs_checker/_" : {
    \       "hook/u_nya_/enable" : 1,
    \       "hook/inu/enable" : 0,
    \       "hook/echo/enable" : 0,
    \       "hook/back_buffer/enable" : 0,
    \       "hook/close_buffer/enable_exit" : 0,
    \       "hook/close_quickfix/enable_exit" : 1,
    \   },
    \
    \   "cpp/watchdogs_checker" : {
    \       "hook/add_include_option/enable" : 1,
    \       "type" : "watchdogs_checker/g++",
    \   },
    \
    \   "haskell/watchdogs_checker" : {
    \       "type" : "watchdogs_checker/hlint",
    \   },
    \
    \   "watchdogs_checker/msvc" : {
    \       "hook/msvc_compiler/enable" : 1,
    \       "hook/msvc_compiler/target" : "c:/program files/microsoft visual studio 10.0",
    \       "hook/output_encode/encoding" : "sjis",
    \       "cmdopt" : "/Zs ",
    \   },
    \
    \   "watchdogs_checker/g++" : {
    \       "cmdopt" : "-std=gnu++0x -Wall",
    \   },
    \
    \   "watchdogs_checker/clang++" : {
    \       "cmdopt" : "-std=gnu++0x -Wall",
    \   },
    \
    \   "python/watchdogs_checker" : {
    \       "type" : "watchdogs_checker/pyflakes",
    \   },
    \
    \   "watchdogs_checker/pyflakes" : {
    \       "command" : "c:/python27/scripts/pyflakes",
    \   },
    \
    \}
    let g:watchdogs_check_BufWritePost_enable = 1
    unl s:config
    "cal watchdogs#setup(g:quickrun_config)
'''

[[plugins]]
repo = 'Shougo/context_filetype.vim'

[[plugins]]
repo = 'osyo-manga/vim-precious'
depends = 'context_filetype.vim'

# ]]]
# * <<< --------------------------------/



# * >>>  selector ----------------------/
# [[[

# ctrlp [[[[
[[plugins]]
repo = 'ctrlpvim/ctrlp.vim'
hook_add = '''
    let g:ctrlp_map                 = 'ff'
    let g:ctrlp_match_window        = 'order:ttb,min:1,max:20,results:100'
    let g:ctrlp_use_migemo          = 1
    let g:ctrlp_clear_cache_on_exit = 0
    let g:ctrlp_mruf_max            = 500
    let g:ctrlp_open_new_file       = 1
    let g:ctrlp_show_hidden         = 1

    no <c-p> <nop>
    nn <silent> ff :<c-u>CtrlP<cr>
    nn <silent> fd :<c-u>CtrlPDir<cr>
    nn <silent> ft :<c-u>CtrlPTag<cr>
    nn <silent> fl :<c-u>CtrlPLine<cr>
    nn <silent> fb :<c-u>CtrlPBuffer<cr>
    nn <silent> fh :<c-u>CtrlPMRUFiles<cr>
    nn <silent> fq :<c-u>CtrlPQuickfix<cr>
'''

[[plugins]]
repo = 'sgur/ctrlp-extensions.vim'
depends = ['ctrlpvim/ctrlp.vim',
           'suy/vim-ctrlp-commandline',
           'vim-scripts/ctrlp-funky',
           'mattn/ctlrp-filer']
hook_add = '''
    let g:ctrlp_extensions = [
    \ 'commandline',
    \ 'funky',
    \ 'lines',
    \ 'pluginmenus',
    \ ]
    nn <silent> fo :<c-u>CtrlPMenu<cr>
'''

[[plugins]]
repo = 'suy/vim-ctrlp-commandline'
depends = 'ctrlpvim/ctrlp.vim'
hook_add = '''
    com! CtrlPCommandLine call ctrlp#init(ctrlp#commandline#id())
    nn <silent> fc :<c-u>CtrlPCmdline<cr>
'''

[[plugins]]
repo = 'vim-scripts/ctrlp-funky'
depends = 'ctrlpvim/ctrlp.vim'
hook_add = '''
    let g:ctrlp_funky_matchtype = 'path'
    let g:ctrlp_funky_syntax_highlight = 1
    let g:ctrlp_funky_matchtype = 'path'
    nn <silent> fu :<c-u>CtrlPFunky<cr>
'''

[[plugins]]
repo = 'mattn/ctrlp-filer'
depends = 'ctrlpvim/ctrlp.vim'

[[plugins]]
repo = 'rking/ag.vim'
depends = 'ctrlpvim/ctrlp.vim'
if = '''executable('ag')'''
hook_add = '''
      let g:ctrlp_use_caching=0
      let g:ctrlp_user_command='ag %s -i --hidden -g ""'
'''

# ]]]
# * <<< --------------------------------/



# * >>>  lang --------------------------/
# [[[

# c [[[[
# ]]]]

# cpp [[[[
[[plugins]]
repo = 'vim-jp/cpp-vim'
on_ft = 'cpp'
# ]]]]

# python [[[[
[[plugins]]
repo = 'hynek/vim-python-pep8-indent'
on_ft = 'python'
# ]]]]

# golang [[[[
[[plugins]]
repo = 'vim-jp/go-vim'
on_ft = 'go'

[[plugins]]
repo = 'fatih/vim-go'
on_ft = 'go'

[[plugins]]
repo = 'vim-jp/vim-go-extra'
on_ft = 'go'
# ]]]]

# haskell [[[[
[[plugins]]
repo = 'dag/vim2hs'
on_ft = 'haskell'
# ]]]]

# shell_script [[[[
[[plugins]]
repo = 'dag/vim-fish'
on_ft = 'fish'
# ]]]]

# toml [[[[
[[plugins]]
repo = 'cespare/vim-toml'
on_ft = 'toml'
# ]]]]

# japanese [[[[
# kaoriya-vimrc [[[[
#[[plugins]]
#repo = 'gist:koron/1436273'
#if   = '''has('kaoriya')'''
# ]]]]

# ]]]
# * <<< --------------------------------/



# * >>>  file --------------------------/
# [[[

[[plugins]]
repo = 'thinca/vim-localrc'

[[plugins]]
repo = 'scrooloose/nerdtree'
hook_add = '''
    nn <silent> no :<c-u>NERDTreeToggle<cr>
'''

# ]]]
# * <<< --------------------------------/



# * >>>  look --------------------------/
# [[[

[[plugins]]
repo = 'itchyny/lightline.vim'
hook_add = '''
    let g:lightline = {
        \ 'colorscheme'          : 'wombat',
        \ 'component'            : {
        \    'readonly'          : '%{&readonly?#\u2b64#:##}', },
        \ 'mode_map'             : {'c': 'NORMAL'},
        \ 'active'               : {
        \    'left'              : [ [ 'mode', 'paste' ], [ 'fugitive', 'filename' ] ] },
        \ 'component_function'   : {
        \    'modified'          : 'MyModified',
        \    'readonly'          : 'MyReadonly',
        \    'fugitive'          : 'MyFugitive',
        \    'filename'          : 'MyFilename',
        \    'fileformat'        : 'MyFileformat',
        \    'filetype'          : 'MyFiletype',
        \    'fileencoding'      : 'MyFileencoding',
        \    'mode'              : 'MyMode' },
        \ }

    fu! MyModified()
        retu &ft =~ 'help\|VimFiler\|gundo' ? '' : &modified ? '+' : &modifiable ? '' : '-'
    endf

    fu! MyReadonly()
        retu &ft !~? 'help\|VimFiler\|gundo' && &readonly ? 'x' : ''
    endf

    fu! MyFilename()
        retu ('' != MyReadonly() ? MyReadonly() . ' ' : '') .
        \(&ft == 'VimFiler' ? VimFiler#get_status_string() :
        \ &ft == 'vimshell' ? vimshell#get_status_string() :
        \'' != expand('%:t') ? expand('%:t') : '[No Name]') .
        \('' != MyModified() ? ' ' . MyModified() : '')
    endf

    fu! MyFugitive()
        try
            if &ft !~? 'VimFiler\|gundo' && exists('*fugitive#head')
                retu fugitive#head()
            endif
            catch
        endt
        retu ''
    endf

    fu! MyFileformat()
        retu winwidth(0) > 70 ? &fileformat : ''
    endf

    fu! MyFiletype()
        retu winwidth(0) > 70 ? (strlen(&filetype) ? &filetype : 'no ft') : ''
    endf

    fu! MyFileencoding()
        retu winwidth(0) > 70 ? (strlen(&fenc) ? &fenc : &enc) : ''
    endf

    fu! MyMode()
        retu winwidth(0) > 60 ? lightline#mode() : ''
    endf
'''

[[plugins]]
repo = 'vim-jp/vimdoc-ja'
on_ft = 'help'

# > colorscheme
[[plugins]]
repo = 'w0ng/vim-hybrid'
hook_add = '''
    set background=dark
    au fau VimEnter * nested colorscheme hybrid
'''

#[[plugins]]
#repo = 'altercation/vim-colors-solarized'
#hook_add = '''
#    set background=dark
#    au fau VimEnter * nested colorscheme solarized
#'''

[[plugins]]
repo = 'tomasr/molokai'

# ]]]
# * <<< --------------------------------/



# * >>>  joke --------------------------/
# [[[

[[plugins]]
repo = 'thinca/vim-scouter'

# ]]]
# * <<< --------------------------------/


[[plugins]]
repo = 'Yggdroot/indentLine'
hook_add = '''
    "let g:indentLine_color_term = 0
    "let g:indentLine_color_gui = '#000000'
    let g:indentLine_char = '|'
'''

# ]]
# * << -------------------------------------------------/

# ]
