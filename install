#!/usr/bin/env bash

#set -u
trap exit ERR

workdir=$(dirname $(readlink -f $0))
dothome="${HOME}/.dot"

filename=$(basename $0)
version="4.04"

usage() {
	cat << EOF
usage: $0 [options]

    --help -h --usage : Show this message
    --version -v      : Show version of this program
    --all -a          : Install dotfiles of ssh, submodule, tmux, vim and zsh
    --ssh             : Install ssh's configuration files 
    --submodule       : Execute only settings related to submodules
    --tmux            : Install tmux's dotfiles
    --vim             : Install vim's dotfiles
    --zsh             : Install zsh's dotfiles
EOF
}

# ref. https://qiita.com/b4b4r07/items/dcd6be0bb9c9185475bb
for opt in ${@}
do
	case ${opt} in
		'-h'|'--help'|'--usage')
			usage
			exit 0
			;;
		'-v'|'--version')
			echo ${version}
			exit 0
			;;
		'-a'|'--all')
			flag+=("ssh" "submodule" "tmux" "vim" "zsh")
			shift 1
			;;
		'--ssh')
			flag+=("ssh")
			shift 1
			;;
		'--submodule')
			flag+=("submodule")
			shift 1
			;;
		'--tmux')
			flag+=("tmux")
			shift 1
			;;
		'--vim')
			flag+=("vim")
			shift 1
			;;
		'--zsh')
			flag+=("zsh")
			shift 1
			;;
		'--'|'-')
			shift 1
			flag+=("$@")
			break
			;;
		-*)
			echo "$filename: illegal option -- '$(echo $1 | sed 's/^-*//')'" 1>&2
			exit 1
			;;
		*)
			if [[ ! -z "${1}" ]] && [[ ! "${1}" =~ ^-+ ]]; then
				flag+=("${1}")
				shift 1
			fi
			;;
	esac
done

if [ -z ${flag} ]; then
 	echo "${filename}: too few arguments" 1>&2
 	echo "Try './${filename} --help' for more information." 1>&2
	exit 1
fi

#declare -i argc=0
#declare -a argv=()
#
#while (( $# > 0 ))
#do
#	case "$1" in
#		-*)
#			if [[ "$1" =~ 'n' ]]; then
#				nflag='-n'
#			fi
#			if [[ "$1" =~ 'l' ]]; then
#				lflag='-l'
#			fi
#			if [[ "$1" =~ 'p' ]]; then
#				pflag='-p'
#			fi
#			shift
#			;;
#		*)
#			((++argc))
#			argv=("${argv[@]}" "$1")
#			shift
#			;;
#	esac
#done

# usage: msg {input|error|success|failed|em|msg} "message body"
msg()
{
	local debug=0

	if [ $1 = "input" ]; then
		read -p "press [enter] to ${@:2}." KEY
	else
		case $1 in
			error)
				local fcolor=1	 # red
				local bcolor=239 # dark gray
				local header="  ERROR  "
				local footer=""
				;;
			success)
				local fcolor=240 # dark gray
				local bcolor=40  # green
				local header=" success "
				local footer=""
				;;
			failed)
				local fcolor=15  # white
				local bcolor=161 # magenta
				local header=" failed  "
				local footer=""
				;;
			em)
				local fcolor=33 # cyan
				local bcolor=33 # cyan
				local header="         "
				local footer=""
				;;
			msg)
				local fcolor=15  # white
				local bcolor=239 # dark gray
				local header="   msg   "
				local footer=""
				;;
			dbg)
				if [ ${debug} = 1 ];then
					local fcolor=233 # dark gray
					local bcolor=220 # yellow
					local header="  debug  "
					local footer=""
				else
					return
				fi
				;;
			*)
				local fcolor=15 # white
				local bcolor=15 # white
				local footer=""
				;;
		esac

		local f="\x1b[38;05;${fcolor}m" # foreground color
		local b="\x1b[48;05;${bcolor}m" # background color
		local reset="\033[00m"
		local header="${f}${b}${header}${reset} "
		local footer=" ${f}${b}${footer}${reset}\n"

		printf "${header}${@:2}${footer}"
	fi
}

setconf ()
{
	case $1 in
		vim)
			local dirname="vim"
			local makedir=".${dirname}"
			local filename=("vimrc" "rc")
			local linkname=(".vimrc" "${makedir}/rc")
			local option=("dir" "link")
			;;
		zsh)
			local dirname="zsh"
			local makedir=".cache/${dirname}"
			local filename=("zshenv" ".")
			local linkname=(".zshenv" ".${dirname}")
			local option=("dir" "link")
			;;
		ssh)
			local dirname="ssh"
			local makedir=".${dirname}/pub"
			local option=("dir")
			;;
		tmux)
			local dirname="tmux"
			local filename=(".tmux.conf")
			local linkname=(".tmux.conf")
			local option=("link")
			;;
		submodule)
			msg msg "init submodule"
			cd ${workdir} && git submodule init && git submodule update
			cd ${workdir}/tmux && git submodule init && git submodule update
			return
			;;
	esac

	local filepath=()
	local linkpath=()

	for c in ${option[@]}
	do
		case $c in
			dir)
				local dirpath="${HOME}/${makedir}"
				msg dbg "dirpath = ${dirpath}"
				if [ ! -d ${dirpath} ]; then
					mkdir -p ${dirpath}
					msg success "mkdir ${dirpath}"
				else
					msg failed "${dirpath} is already exist. [directory]"
				fi
			;;
			link)
				if [ ${#filename[@]} = ${#linkname[@]} ]; then
					msg dbg "filename = ${#filename[@]}"
					msg dbg "linkname = ${#linkname[@]}"
					for n in ${filename[@]}
					do
						filepath+=("${workdir}/${dirname}/${n}")
					msg dbg "filepath = ${n}"
					done
					msg dbg "filepath = ${#filepath[@]}"
					for n in ${linkname[@]}
					do
						linkpath+=("${HOME}/${n}")
					msg dbg "linkpath = ${n}"
					done
					msg dbg "linkpath = ${#linkpath[@]}"
				fi
				for ((i=0;${i}<=${#filepath[@]}-1;i++))
				do
					if [ ${1} = "tmux" ]; then
						msg msg "compile tmux plugin"
						if [ ! -e ${HOME}/${filename} ]; then
							msg log "installing tmux-config..."
							if ! type cmake >/dev/null 2>&1; then
								msg error "Your computer 'cmake' is NOT installed.\nPlease execute something similar to the following command\nsudo apt install cmake build-essential"
								msg input "skip."
								continue
							else
								cd ${workdir}/${dirname}/vendor/tmux-mem-cpu-load && cmake . && make && sudo make install
								cd ${workdir}
								msg msg "done."
							fi
						else
							msg msg "skip."
						fi
					fi
					msg dbg "i = ${i}"
					msg dbg "filepath[${i}] = ${filepath[${i}]}"
					msg dbg "linkpath[${i}] = ${linkpath[${i}]}"
					if [ ! -e ${linkpath[$i]} ]; then
						ln -s ${filepath[$i]} ${linkpath[$i]}
						msg success "link ${filepath[$i]} -> ${linkpath[$i]}"
					else
						msg failed "${linkpath[$i]} is already exist. [symbolic link]"
					fi

				done
				unset filepath linkpath
			;;
		esac
	done

}



## MAIN ########################################################


if [[ ! "${OSTYPE}" =~ 'linux' ]]; then
 	msg error "Your environment is ${OSTYPE}. This script can run only on linux."
 	msg input "exit."
	return 2>&- || exit
fi

if ! type git >/dev/null 2>&1; then
	msg error "Your computer 'git' is NOT installed."
	msg input "exit."
	return 2>&- || exit
fi

if [ ! -e ${HOME}/.gitconfig ]; then
	msg error "Your computer '.gitconfig' is NOT found."
	msg input "exit."
	return 2>&- || exit
fi

msg em "start script: $0"

if [ ! -e ${workdir} ]; then
	cp -r ${workdir} ${dothome}
	${workdir} = ${dothome}
fi

for f in ${flag[@]}
do
	msg msg "start initial settings of ${f}"
	setconf ${f}
	msg msg "end initial settings of ${f}"
done

msg em "all done."

################################################################
