#!/usr/bin/env bash

#				* ver				: 3.82

set -u
trap exit ERR

workdir=$(dirname $(readlink -f $0))
dothome="${HOME}/.dot"
flag=()

help() {
	cat << EOF
usage: $0 [options]

    --help               Show this message
    --all (-a )          Install dotfiles of ssh, submodule, tmux, vim and zsh
    --ssh                Install only the configuration files of ssh
    --submodule          Execute only settings related to submodules
     -tmux               Install only the dotfiles of tmux
    --vim                Install only the dotfiles of vim
    --zsh                Install only the dotfiles of zsh
EOF
}

if [ ${#} -le 0 ]; then
	help
  exit 1
fi

for opt in ${@}; do
	case $opt in
		--help)
			help
			exit 0
			;;
		-a)          flag+=("ssh" "submodule" "tmux" "vim" "zsh");;
		--all)       flag+=("ssh" "submodule" "tmux" "vim" "zsh");;
		--ssh)       flag+=("ssh");;
		--submodule) flag+=("submodule");;
		--tmux)      flag+=("tmux");;
		--vim)       flag+=("vim");;
		--zsh)       flag+=("zsh");;
		*)
			echo "unknown option: $opt"
			help
			exit 1
			;;
	esac
done

# usage: msg {input|error|success|failed|em|msg|log} "message body"
msg()
{
	local debug=0

	if [ $1 = "input" ]; then
		read -p "press [enter] to ${@:2}." KEY
	else
		local headertype1="|-- [$1] "
		case $1 in
			error)
				local color=200 #RED
				local header="\n!! ERROR !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n"
				local footer="\n!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n"
				;;
			success)
				local color=47 # GREEN
				local header=${headertype1}
				local footer=""
				;;
			failed)
				local color=197 #RED
				local header=${headertype1}
				local footer=""
				;;
			em)
				local color=110 #BLUE
				local header="\n###############################################################\n"
				local footer="\n###############################################################\n"
				;;
			msg)
				local color=216 #ORANGE
				local header="|-- [msg] "
				local footer=""
				;;
			dbg)
				if [ ${debug} = 1 ];then
					local color=83 #GREEN
					local header=${headertype1}
					local footer=""
				else
					return
				fi
				;;
			*)
				local color=15 #WHITE
				local header=${headertype1}
				local footer=""
				;;
		esac

		local header="\x1b[38;05;${color}m${header}"
		local footer="${footer}\033[00m\n"
		printf "${header}${@:2}${footer}"
	fi
}

setconf ()
{
	case $1 in
		vim)
			local dirname="vim"
			local makedir=".${dirname}"
			local filename=("vimrc" "rc")
			local linkname=(".vimrc" "${makedir}/rc")
			local option=("dir" "link")
			;;
		zsh)
			local dirname="zsh"
			local makedir=".cache/${dirname}"
			local filename=("zshenv" ".")
			local linkname=(".zshenv" ".${dirname}")
			local option=("dir" "link")
			;;
		ssh)
			local dirname="ssh"
			local makedir=".${dirname}/pub"
			local option=("dir")
			;;
		tmux)
			local dirname="tmux"
			local filename=(".tmux.conf")
			local linkname=(".tmux.conf")
			local option=("link")
			;;
		submodule)
			msg msg "init submodule"
			cd ${workdir} && git submodule init && git submodule update
			cd ${workdir}/tmux && git submodule init && git submodule update
			return
			;;
	esac

	local filepath=()
	local linkpath=()

	for c in ${option[@]}
	do
		case $c in
			dir)
				local dirpath="${HOME}/${makedir}"
				msg dbg "dirpath = ${dirpath}"
				if [ ! -d ${dirpath} ]; then
					mkdir -p ${dirpath}
					msg success "mkdir ${dirpath}"
				else
					msg failed "${dirpath} is already exist. [directory]"
				fi
			;;
			link)
				if [ ${#filename[@]} = ${#linkname[@]} ]; then
					msg dbg "filename = ${#filename[@]}"
					msg dbg "linkname = ${#linkname[@]}"
					for n in ${filename[@]}
					do
						filepath+=("${workdir}/${dirname}/${n}")
					msg dbg "filepath = ${n}"
					done
					msg dbg "filepath = ${#filepath[@]}"
					for n in ${linkname[@]}
					do
						linkpath+=("${HOME}/${n}")
					msg dbg "linkpath = ${n}"
					done
					msg dbg "linkpath = ${#linkpath[@]}"
				fi
				for ((i=0;${i}<=${#filepath[@]}-1;i++))
				do
					if [ ${1} = "tmux" ]; then
						msg msg "compile tmux plugin"
						if [ ! -e ${HOME}/${filename} ]; then
							msg log "installing tmux-config..."
							if ! type cmake >/dev/null 2>&1; then
								msg error "Your computer 'cmake' is NOT installed.\nPlease execute something similar to the following command\nsudo apt install cmake build-essential"
								msg input "skip."
								continue
							else
								cd ${workdir}/${dirname}/vendor/tmux-mem-cpu-load && cmake . && make && sudo make install
								cd ${workdir}
								msg msg "done."
							fi
						else
							msg msg "skip."
						fi
					fi

					msg dbg "i = ${i}"
					msg dbg "filepath[${i}] = ${filepath[${i}]}"
					msg dbg "linkpath[${i}] = ${linkpath[${i}]}"
					if [ ! -e ${linkpath[$i]} ]; then
						ln -s ${filepath[$i]} ${linkpath[$i]}
						msg success "link ${filepath[$i]} -> ${linkpath[$i]}"
					else
						msg failed "${linkpath[$i]} is already exist. [symbolic link]"
					fi

				done
				unset filepath linkpath
			;;
		esac
	done

}


## MAIN ########################################################

msg em "scriptname: $0"

case ${OSTYPE} in
	linux*)
		;;
	*)
		msg error "Your environment is ${OSTYPE}. This script can run only on linux."
		msg input "exit."
		return 2>&- || exit
		;;
esac

if ! type git >/dev/null 2>&1; then
	msg error "Your computer 'git' is NOT installed."
	msg input "exit."
	return 2>&- || exit
fi

if [ ! -e ${HOME}/.gitconfig ]; then
	msg error "Your computer '.gitconfig' is NOT found."
	msg input "exit."
	return 2>&- || exit
fi

if [ ! -e ${workdir} ]; then
	cp -r ${workdir} ${dothome}
	${workdir} = ${dothome}
fi

for f in ${flag[@]}
do
	msg msg "start ${f}"
	setconf ${f}
	msg msg "end ${f}\n"
done

msg em "all done."
################################################################
