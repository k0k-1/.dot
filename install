#!/usr/bin/env bash

set -Ceuo pipefail
trap exit ERR

declare -r scriptname=$(basename ${0})
declare -r version="4.2.0"

declare -r workdir=$(dirname $(readlink -f ${scriptname}))
declare -r dothome="${HOME}/.dot"

declare -a flag=()

msg()
{
  if [ ${1} = "input" ]; then
    read -p "press [enter] to ${@:2}." KEY
  else
    case ${1} in
      error)
        local -i fcolor=0 # black
        local -i bcolor=1 # red
        local header="  ERROR  "
        local footer=""
        ;;
      warn)
        local -i fcolor=240 # dark gray
        local -i bcolor=220 # yellow
        local header="    !    "
        local footer=""
        ;;
      success)
        local -i fcolor=240 # dark gray
        local -i bcolor=40  # green
        local header=" success "
        local footer=""
        ;;
      failed)
        local -i fcolor=15  # white
        local -i bcolor=161 # magenta
        local header=" failed  "
        local footer=""
        ;;
      em)
        local -i fcolor=33 # cyan
        local -i bcolor=33 # cyan
        local header="   msg   "
        local footer=""
        ;;
      msg)
        local -i fcolor=15  # white
        local -i bcolor=239 # dark gray
        local header="   msg   "
        local footer=""
        ;;
      *)
        local -i fcolor=15  # white
        local -i bcolor=239 # dark gray
        local header="  ${1}  "
        local footer=""
        ;;
    esac

    local f="\x1b[38;05;${fcolor}m" # foreground color
    local b="\x1b[48;05;${bcolor}m" # background color
    local reset="\033[00m"
    local header="${f}${b}${header}${reset}"
    local footer="${f}${b}${footer}${reset}"
    local header="${header} "
    local footer=" ${footer}\n"

    shift
    printf "${header}${@}${footer}"
  fi
}

usage() {
  msg usage "./${scriptname} [options]"
  cat << EOF
    --help | -h | --usage : Show this message
    --version | -v        : Show version of this program
    --all                 : Install dotfiles of ssh, submodule, tmux, vim and zsh
    --ssh                 : Install ssh's configuration files 
    --submodule           : Execute only settings related to submodules
    --tmux                : Install tmux's dotfiles
    --vim                 : Install vim's dotfiles
    --zsh                 : Install zsh's dotfiles
EOF
}

# ref. https://qiita.com/b4b4r07/items/dcd6be0bb9c9185475bb
for opt in ${@}
do
  case ${opt} in
    '-h'|'--help'|'--usage')
      usage
      exit 0
      ;;
    '-v'|'--version')
      msg version ${version}
      exit 0
      ;;
    '-a'|'--all')
      flag+=("ssh" "submodule" "tmux" "vim" "zsh")
      shift 1
      ;;
    '--ssh')
      flag+=("ssh")
      shift 1
      ;;
    '--submodule')
      flag+=("submodule")
      shift 1
      ;;
    '--tmux')
      flag+=("tmux")
      shift 1
      ;;
    '--vim')
      flag+=("vim")
      shift 1
      ;;
    '--zsh')
      flag+=("zsh")
      shift 1
      ;;
    '--'|'-')
      shift 1
      flag+=("${@}")
      break
      ;;
    -*)
      msg error "${scriptname}: illegal option -- '$(printf ${1} | sed 's/^-*//')'" 1>&2
      usage
      exit 1
      ;;
    *)
      msg error "${scriptname}: illegal option -- '${1}'" 1>&2
      usage
      exit 1
      ;;
  esac
done

flag+=("")
if [ -z ${flag} ]; then
  msg warn "installation target is not specified"
  msg msg "install with a recommended configuration"
  flag+=("ssh" "vim" "zsh")
fi

setconf ()
{
  case ${1} in
    vim)
      local dirname="vim"
      local makedir=".${dirname}"
      local -a filename=("vimrc" "rc")
      local -a linkname=(".vimrc" "${makedir}/rc")
      local -a option=("dir" "link")
      ;;
    zsh)
      local dirname="zsh"
      local makedir=".cache/${dirname}"
      local -a filename=("zshenv" ".")
      local -a linkname=(".zshenv" ".${dirname}")
      local -a option=("dir" "link")
      ;;
    ssh)
      local dirname="ssh"
      local makedir=".${dirname}/pub"
      local -a option=("dir")
      ;;
    tmux)
      local dirname="tmux"
      local -a filename=(".tmux.conf")
      local -a linkname=(".tmux.conf")
      local -a option=("link")
      ;;
    submodule)
      msg msg "init submodule"
      cd ${workdir} && git submodule init && git submodule update
      cd ${workdir}/tmux && git submodule init && git submodule update
      return
      ;;
    *)
      return 0
      ;;
  esac

  local -a filepath=()
  local -a linkpath=()

  for c in ${option[@]}
  do
    case ${c} in
      dir)
        local dirpath="${HOME}/${makedir}"
        if [ ! -d ${dirpath} ]; then
          mkdir -p ${dirpath}
          msg success "mkdir ${dirpath}"
        else
          msg failed "${dirpath} is already exist. [directory]"
        fi
      ;;
      link)
        if [ ${#filename[@]} = ${#linkname[@]} ]; then
          for n in ${filename[@]}
          do
            filepath+=("${workdir}/${dirname}/${n}")
          done
          for n in ${linkname[@]}
          do
            linkpath+=("${HOME}/${n}")
          done
        fi
        for ((i=0;${i}<=${#filepath[@]}-1;i++))
        do
          if [ ${1} = "zsh" ]; then
            git clone https://github.com/zsh-users/zsh-syntax-highlighting ${HOME}/.syntax
          fi
          if [ ${1} = "tmux" ]; then
            msg msg "compile tmux plugin"
            if [ ! -e ${HOME}/${filename} ]; then
              msg msg "installing tmux-config..."
              if ! type cmake >/dev/null 2>&1; then
                msg error "'cmake' is NOT installed on your computer.\nPlease execute something similar to the following command\nsudo apt install cmake build-essential"
                msg input "skip."
                continue
              else
                cd ${workdir}/${dirname}/vendor/tmux-mem-cpu-load && cmake . && make && sudo make install
                cd ${workdir}
                msg msg "done."
              fi
            else
              msg msg "skip."
            fi
          fi
          if [ ! -e ${linkpath[${i}]} ]; then
            ln -s ${filepath[${i}]} ${linkpath[$i]}
            msg success "link ${filepath[${i}]} -> ${linkpath[${i}]}"
          else
            msg failed "${linkpath[$i]} is already exist. [symbolic link]"
          fi
        done
        unset filepath linkpath
      ;;
    esac
  done
}



## MAIN ########################################################

if [[ ! "${OSTYPE}" =~ 'linux' ]]; then
  msg error "Your environment is ${OSTYPE}. This script can run only on linux."
  msg input "exit."
  return 2>&- || exit
fi

if ! type git >/dev/null 2>&1; then
  msg error "'git' is NOT installed on your computer."
  msg input "exit."
  return 2>&- || exit
fi

if [ ! -e ${HOME}/.gitconfig ]; then
  result=0
  cp ${workdir}/.gitconfig ${HOME}/.gitconfig 2>&1 > /dev/null || result=$?
  if [[ ! ${result} -eq 0 ]]; then
    msg error "'.gitconfig' is NOT found on your computer."
    msg input "exit."
    return 2>&- || exit
  fi
fi

msg em "start script: ${scriptname}"

if [ ! -e ${workdir} ]; then
  cp -r ${workdir} ${dothome}
  ${workdir} = ${dothome}
fi

for f in ${flag[@]}
do
  msg msg "start initial settings of ${f}"
  setconf ${f}
  msg msg "end initial settings of ${f}"
done

msg em "all done."

################################################################
